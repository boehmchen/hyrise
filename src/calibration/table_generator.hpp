#pragma once


#include <iostream>

#include <all_type_variant.hpp>
#include <storage/encoding_type.hpp>
#include <synthetic_table_generator.hpp>
#include "calibration_table_wrapper.hpp"

class Table;

namespace opossum {

struct TableGeneratorConfig{
  std::set<DataType> data_types;
  std::set<EncodingType> encoding_types;
  std::vector<ColumnDataDistribution> column_data_distribution;
  std::set<int> chunk_offsets;
  std::set<int> row_counts;
};

class TableGenerator {
 public:
  explicit TableGenerator(std::shared_ptr<TableGeneratorConfig> config);
  /**
   * Generates a vector of tables by looping through every possible combination of
   * chunk offsets and row counts. Columns within a table is generated by looping though
   * all combinations of data types, encoding types, column data distributions.
   *
   * @return vector of calibration tables
   */
  std::vector<std::shared_ptr<const CalibrationTableWrapper>> generate() const;

 private:
  std::vector<DataType> _data_types_collection;
  std::vector<SegmentEncodingSpec> _segment_encoding_spec_collection;
  std::vector<ColumnDataDistribution> _column_data_distribution_collection;
  std::vector<int> _chunk_offsets;
  std::vector<int> _row_counts;
  std::vector<std::string> _column_names;
};

}  // namespace opossum
