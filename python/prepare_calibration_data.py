# This script is used to join and clean the calibration data for use in the 'cost_models' script
# It takes as arguments the four .csv files that are generated by the cost calibration run on hyrise

import pandas as pd


def import_train_data(input_data):
    table_scan_data = pd.read_csv(input_data[0])
    table_data = pd.read_csv(input_data[1])
    columns_data = pd.read_csv(input_data[2])
    chunk_meta = pd.read_csv(input_data[3])

    joined_data = table_scan_data.merge(table_data, on=["TABLE_NAME"], how="left")
    joined_data = joined_data.merge(columns_data, on=["TABLE_NAME", "COLUMN_NAME"], how="left")

    # only look at the encoding of the first chunk
    chunkrows = chunk_meta.loc[(chunk_meta['CHUNK_ID'] == 0)]
    joined_data = joined_data.merge(chunkrows, on=["TABLE_NAME", "COLUMN_NAME"], how="left")

    joined_data = joined_data.rename(columns={"INPUT_ROWS_LEFT": "INPUT_ROWS", "CHUNK_SIZE": "MAX_CHUNK_SIZE",
                                              "COLUMN_DATA_TYPE": "DATA_TYPE", "ENCODING_TYPE": "ENCODING"})

    # remove the rows with ExpressionEvaluator queries from the test data since we don't have any in the test data
    joined_data = joined_data.loc[(joined_data['SCAN_IMPLEMENTATION'] != 'ExpressionEvaluator')]

# explicitly add selectivity
    joined_data['SELECTIVITY'] = (joined_data['OUTPUT_ROWS'] / joined_data['INPUT_ROWS'])
    joined_data['SELECTIVITY'].fillna(0, inplace=True)
    return joined_data
